"use strict";(self.webpackChunkworkout_notes=self.webpackChunkworkout_notes||[]).push([[147],{343:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"interview/interview-questions","title":"interview-questions","description":"Core Concepts (Closures, Hoisting, Scope)","source":"@site/docs/interview/interview-questions.mdx","sourceDirName":"interview","slug":"/interview/interview-questions","permalink":"/docs/interview/interview-questions","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Interview","permalink":"/docs/category/interview"}}');var o=r(4848),t=r(8453);const c={},i=void 0,a={},l=[{value:"<strong>Core Concepts (Closures, Hoisting, Scope)</strong>",id:"core-concepts-closures-hoisting-scope",level:3},{value:"<strong>ES6+ Features</strong>",id:"es6-features",level:3},{value:"<strong>Promises and Async/Await</strong>",id:"promises-and-asyncawait",level:3},{value:"<strong>Event Handling</strong>",id:"event-handling",level:3},{value:"<strong>DOM Manipulation</strong>",id:"dom-manipulation",level:3},{value:"<strong>Memory Management</strong>",id:"memory-management",level:3},{value:"<strong>Error Handling</strong>",id:"error-handling",level:3},{value:"<strong>Array Methods</strong>",id:"array-methods",level:3},{value:"<strong>Object-Oriented Programming</strong>",id:"object-oriented-programming",level:3}];function d(e){const n={br:"br",code:"code",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h3,{id:"core-concepts-closures-hoisting-scope",children:(0,o.jsx)(n.strong,{children:"Core Concepts (Closures, Hoisting, Scope)"})}),"\n",(0,o.jsxs)(n.p,{children:["\u2753 ",(0,o.jsx)(n.strong,{children:"What is a closure, and why is it useful?"}),(0,o.jsx)(n.br,{}),"\n","\ud83d\udd11 ",(0,o.jsx)(n.strong,{children:"Answer"}),': A closure is a function that "remembers" the variables from its lexical scope, even after the outer function has finished execution. Closures are often used for data privacy and creating function factories.']}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"function outer() {\r\n  let count = 0; // Lexical scope variable\r\n  return function inner() {\r\n    count++; \r\n    return count; \r\n  };\r\n}\r\nconst counter = outer();\r\nconsole.log(counter()); // 1\r\nconsole.log(counter()); // 2\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"es6-features",children:(0,o.jsx)(n.strong,{children:"ES6+ Features"})}),"\n",(0,o.jsxs)(n.p,{children:["\u2753 ",(0,o.jsxs)(n.strong,{children:["What is the difference between ",(0,o.jsx)(n.code,{children:"let"}),", ",(0,o.jsx)(n.code,{children:"const"}),", and ",(0,o.jsx)(n.code,{children:"var"}),"?"]})," \ud83e\udde0",(0,o.jsx)(n.br,{}),"\n","\ud83d\udd11 ",(0,o.jsx)(n.strong,{children:"Answer"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"var"}),": Function-scoped and hoisted. Can be re-declared. \ud83d\ude35"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"let"}),": Block-scoped. Can be re-assigned but not re-declared within the same scope. \ud83d\ude80"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"const"}),": Block-scoped. Cannot be re-assigned or re-declared. Great for constants! \ud83d\udeab"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'const name = "Copilot"; \r\nname = "AI"; // \u274c Error: Assignment to constant variable\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"promises-and-asyncawait",children:(0,o.jsx)(n.strong,{children:"Promises and Async/Await"})}),"\n",(0,o.jsxs)(n.p,{children:["\u2753 ",(0,o.jsx)(n.strong,{children:"What is the difference between promises and async/await?"})," \u2728",(0,o.jsx)(n.br,{}),"\n","\ud83d\udd11 ",(0,o.jsx)(n.strong,{children:"Answer"}),": Promises are objects representing eventual completion or failure of an asynchronous operation. Async/Await makes it easier to handle promises by writing cleaner, synchronous-like code."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'// Promise Example\r\nfetch("https://api.example.com")\r\n  .then(response => response.json())\r\n  .then(data => console.log(data))\r\n  .catch(error => console.error(error));\r\n\r\n// Async/Await Example\r\nasync function fetchData() {\r\n  try {\r\n    const response = await fetch("https://api.example.com");\r\n    const data = await response.json();\r\n    console.log(data);\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"event-handling",children:(0,o.jsx)(n.strong,{children:"Event Handling"})}),"\n",(0,o.jsxs)(n.p,{children:["\u2753 ",(0,o.jsx)(n.strong,{children:"How can you attach an event handler to an element?"})," \ud83d\uddb1\ufe0f",(0,o.jsx)(n.br,{}),"\n","\ud83d\udd11 ",(0,o.jsx)(n.strong,{children:"Answer"}),": You can use ",(0,o.jsx)(n.code,{children:"addEventListener"})," to attach event handlers dynamically. Example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'document.querySelector("#btn").addEventListener("click", () => {\r\n  alert("Button clicked! \ud83d\ude80");\r\n});\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"dom-manipulation",children:(0,o.jsx)(n.strong,{children:"DOM Manipulation"})}),"\n",(0,o.jsxs)(n.p,{children:["\u2753 ",(0,o.jsx)(n.strong,{children:"How do you dynamically create and append a new DOM element?"})," \ud83c\udfd7\ufe0f",(0,o.jsx)(n.br,{}),"\n","\ud83d\udd11 ",(0,o.jsx)(n.strong,{children:"Answer"}),": Use ",(0,o.jsx)(n.code,{children:"createElement"})," and ",(0,o.jsx)(n.code,{children:"appendChild"})," or modern ",(0,o.jsx)(n.code,{children:"append"}),". Example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'const newDiv = document.createElement("div");\r\nnewDiv.textContent = "Hello, DOM!";\r\ndocument.body.appendChild(newDiv); // Appends to the body\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"memory-management",children:(0,o.jsx)(n.strong,{children:"Memory Management"})}),"\n",(0,o.jsxs)(n.p,{children:["\u2753 ",(0,o.jsx)(n.strong,{children:"How does garbage collection work in JavaScript?"})," \ud83d\uddd1\ufe0f",(0,o.jsx)(n.br,{}),"\n","\ud83d\udd11 ",(0,o.jsx)(n.strong,{children:"Answer"}),": The garbage collector automatically removes unused objects from memory. Objects are eligible for collection if they are no longer reachable or referenced.",(0,o.jsx)(n.br,{}),"\n","Example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'let obj = { data: "Copilot" }; \r\nobj = null; // Unreachable and eligible for garbage collection\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"error-handling",children:(0,o.jsx)(n.strong,{children:"Error Handling"})}),"\n",(0,o.jsxs)(n.p,{children:["\u2753 ",(0,o.jsx)(n.strong,{children:"How do you handle errors in JavaScript?"})," \u26a0\ufe0f",(0,o.jsx)(n.br,{}),"\n","\ud83d\udd11 ",(0,o.jsx)(n.strong,{children:"Answer"}),": Use ",(0,o.jsx)(n.code,{children:"try...catch"})," blocks for handling synchronous errors and ",(0,o.jsx)(n.code,{children:".catch()"})," or ",(0,o.jsx)(n.code,{children:"async/await"})," with ",(0,o.jsx)(n.code,{children:"try...catch"})," for asynchronous errors."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'try {\r\n  throw new Error("Oops! Something went wrong.");\r\n} catch (err) {\r\n  console.error(err.message); // "Oops! Something went wrong."\r\n}\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"array-methods",children:(0,o.jsx)(n.strong,{children:"Array Methods"})}),"\n",(0,o.jsxs)(n.p,{children:["\u2753 ",(0,o.jsxs)(n.strong,{children:["What does the ",(0,o.jsx)(n.code,{children:"map"})," method do?"]})," \ud83d\uddfa\ufe0f",(0,o.jsx)(n.br,{}),"\n","\ud83d\udd11 ",(0,o.jsx)(n.strong,{children:"Answer"}),": The ",(0,o.jsx)(n.code,{children:"map"})," method creates a new array by transforming each element in the original array. Example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"const nums = [1, 2, 3];\r\nconst squares = nums.map(num => num * num); // [1, 4, 9]\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"object-oriented-programming",children:(0,o.jsx)(n.strong,{children:"Object-Oriented Programming"})}),"\n",(0,o.jsxs)(n.p,{children:["\u2753 ",(0,o.jsx)(n.strong,{children:"What is the difference between a class and a constructor function?"})," \ud83c\udfdb\ufe0f",(0,o.jsx)(n.br,{}),"\n","\ud83d\udd11 ",(0,o.jsx)(n.strong,{children:"Answer"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"A constructor function is the traditional way of creating objects."}),"\n",(0,o.jsxs)(n.li,{children:["Classes, introduced in ES6, are syntactic sugar over constructor functions. They use ",(0,o.jsx)(n.code,{children:"class"})," keyword and make OOP more readable."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'class Person {\r\n  constructor(name) {\r\n    this.name = name;\r\n  }\r\n  greet() {\r\n    return `Hello, my name is ${this.name}!`;\r\n  }\r\n}\r\nconst copilot = new Person("Copilot");\r\nconsole.log(copilot.greet()); // Hello, my name is Copilot!\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.p,{children:"Would you like me to delve deeper into any of these topics? \ud83d\ude80\u2728"})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>i});var s=r(6540);const o={},t=s.createContext(o);function c(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);